{"file_contents":{"app.py":{"content":"import os\nimport logging\n\nfrom flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\nfrom sqlalchemy.orm import DeclarativeBase\nfrom werkzeug.middleware.proxy_fix import ProxyFix\n\n# Setup logging\nlogging.basicConfig(level=logging.DEBUG)\n\nclass Base(DeclarativeBase):\n    pass\n\ndb = SQLAlchemy(model_class=Base)\n\n# create the app\napp = Flask(__name__)\napp.secret_key = os.environ.get(\"SESSION_SECRET\", \"dev-secret-key-change-in-production\")\napp.wsgi_app = ProxyFix(app.wsgi_app, x_proto=1, x_host=1)\n\n# configure the database, relative to the app instance folder\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = os.environ.get(\"DATABASE_URL\", \"sqlite:///event_scores.db\")\napp.config[\"SQLALCHEMY_ENGINE_OPTIONS\"] = {\n    \"pool_recycle\": 300,\n    \"pool_pre_ping\": True,\n}\n\n# File upload configuration\napp.config['UPLOAD_FOLDER'] = 'static/uploads'\napp.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024  # 16MB max file size\n\n# Create upload directory if it doesn't exist\nos.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)\n\n# initialize the app with the extension\ndb.init_app(app)\n\nwith app.app_context():\n    # Import models and routes\n    import models\n    import routes\n    \n    # Create tables\n    db.create_all()\n    \n    # Initialize default teams if none exist\n    from models import Team\n    if Team.query.count() == 0:\n        default_teams = [\n            \"Team Alpha\", \"Team Beta\", \"Team Gamma\", \"Team Delta\", \"Team Epsilon\",\n            \"Team Zeta\", \"Team Eta\", \"Team Theta\", \"Team Iota\", \"Team Kappa\", \"Team Lambda\"\n        ]\n        \n        for i, team_name in enumerate(default_teams, 1):\n            team = Team(\n                name=team_name,\n                photo_url=None,\n                dance_score=0,\n                song_score=0,\n                ramp_walk_score=0,\n                game_score=0\n            )\n            db.session.add(team)\n        \n        db.session.commit()\n        logging.info(\"Created 11 default teams\")\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000, debug=True)\n\n","size_bytes":2027},"main.py":{"content":"from app import app\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000, debug=True)\n","size_bytes":99},"models.py":{"content":"from app import db\nfrom datetime import datetime\n\nclass Performance(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    performer_name = db.Column(db.String(100), nullable=False)\n    performance_type = db.Column(db.String(50), nullable=False)  # Group Dance, Solo Dance, Song, etc.\n    year = db.Column(db.String(10), nullable=False)  # I, II, III\n    contact_number = db.Column(db.String(15), nullable=True)\n    mc_session = db.Column(db.String(20), nullable=True)  # MC-1, MC-2, etc.\n    time_slot = db.Column(db.String(50), nullable=True)  # 9:15-9:45Am, etc.\n    is_completed = db.Column(db.Boolean, default=False)\n    completed_at = db.Column(db.DateTime, nullable=True)\n    notes = db.Column(db.Text, nullable=True)\n    \n    def to_dict(self):\n        \"\"\"Convert performance object to dictionary for JSON responses\"\"\"\n        return {\n            'id': self.id,\n            'performer_name': self.performer_name,\n            'performance_type': self.performance_type,\n            'year': self.year,\n            'contact_number': self.contact_number,\n            'mc_session': self.mc_session,\n            'time_slot': self.time_slot,\n            'is_completed': self.is_completed,\n            'completed_at': self.completed_at.isoformat() if self.completed_at else None,\n            'notes': self.notes\n        }\n    \n    def mark_completed(self):\n        \"\"\"Mark performance as completed\"\"\"\n        self.is_completed = True\n        self.completed_at = datetime.utcnow()\n\nclass Team(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(100), nullable=False)\n    photo_url = db.Column(db.String(200), nullable=True)\n    dance_score = db.Column(db.Float, default=0.0)\n    song_score = db.Column(db.Float, default=0.0)\n    ramp_walk_score = db.Column(db.Float, default=0.0)\n    game_score = db.Column(db.Float, default=0.0)\n    \n    @property\n    def total_score(self):\n        \"\"\"Calculate total score from all rounds\"\"\"\n        return self.dance_score + self.song_score + self.ramp_walk_score + self.game_score\n    \n    def to_dict(self):\n        \"\"\"Convert team object to dictionary for JSON responses\"\"\"\n        return {\n            'id': self.id,\n            'name': self.name,\n            'photo_url': self.photo_url,\n            'dance_score': self.dance_score,\n            'song_score': self.song_score,\n            'ramp_walk_score': self.ramp_walk_score,\n            'game_score': self.game_score,\n            'total_score': self.total_score\n        }\n","size_bytes":2515},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"flask>=3.1.2\",\n    \"flask-sqlalchemy>=3.1.1\",\n    \"gunicorn>=23.0.0\",\n    \"psycopg2-binary>=2.9.10\",\n    \"sqlalchemy>=2.0.43\",\n    \"werkzeug>=3.1.3\",\n]\n","size_bytes":299},"replit.md":{"content":"# Overview\n\nThis is a Flask web application for managing and displaying scores for college event competitions. The application features a public leaderboard that displays team rankings and an admin dashboard for managing team information and scores. Teams compete in four different events: Dance, Song, Ramp Walk, and Game, with a combined total score determining their ranking.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Backend Architecture\n- **Framework**: Flask web framework with SQLAlchemy ORM for database operations\n- **Database**: SQLite as the default database with configurable DATABASE_URL for production deployments\n- **Models**: Single Team model storing team information and scores for four event categories\n- **API Design**: RESTful endpoints for team data retrieval and updates (`/api/teams`)\n- **File Handling**: Image upload system for team photos with file type validation and size limits\n\n## Frontend Architecture\n- **Template Engine**: Jinja2 templating with base template inheritance\n- **UI Framework**: Bootstrap 5 with dark theme for responsive design\n- **JavaScript Architecture**: Modular class-based approach with separate files for admin dashboard, leaderboard, and confetti animations\n- **Real-time Updates**: Auto-refresh functionality on leaderboard (5-second intervals)\n- **Asset Management**: Static file serving for CSS, JavaScript, and uploaded images\n\n## Data Storage\n- **Primary Storage**: SQLite database with Team table containing scoring fields\n- **File Storage**: Local filesystem storage for team photos in `static/uploads` directory\n- **Session Management**: Flask sessions with configurable secret key\n- **Data Validation**: Input validation for scores (0-100 range) and file uploads\n\n## Authentication & Authorization\n- **Security Model**: No authentication system implemented - open access to both admin and public views\n- **File Security**: Secure filename handling for uploads with allowed file extension filtering\n- **Environment Configuration**: Environment variable support for database URL and session secrets\n\n# External Dependencies\n\n## Third-party Services\n- **CDN Resources**: Bootstrap CSS/JS and Font Awesome icons served from external CDNs\n- **No External APIs**: Application operates independently without external service dependencies\n\n## Python Dependencies\n- **Flask**: Web framework and core functionality\n- **Flask-SQLAlchemy**: Database ORM and model management\n- **Werkzeug**: WSGI utilities including ProxyFix middleware and secure filename handling\n\n## Frontend Libraries\n- **Bootstrap 5**: UI framework with dark theme variant\n- **Font Awesome 6**: Icon library for UI elements\n- **Vanilla JavaScript**: No external JavaScript frameworks - uses native browser APIs\n\n## Development Tools\n- **Database**: SQLite for development, PostgreSQL-compatible for production\n- **File Upload**: Built-in Flask file handling with configurable upload directory\n- **Logging**: Python's built-in logging module configured for debug level","size_bytes":3055},"routes.py":{"content":"import os\nfrom flask import render_template, request, jsonify, redirect, url_for, flash\nfrom werkzeug.utils import secure_filename\nfrom app import app, db\nfrom models import Team, Performance\n\nALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg', 'gif', 'webp'}\n\ndef allowed_file(filename):\n    return '.' in filename and \\\n           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\n\n@app.route('/')\ndef index():\n    \"\"\"Redirect to leaderboard as default page\"\"\"\n    return redirect(url_for('leaderboard'))\n\n@app.route('/admin')\ndef admin():\n    \"\"\"Admin dashboard for managing teams and scores\"\"\"\n    teams = Team.query.order_by(Team.id).all()\n    return render_template('admin.html', teams=teams)\n\n@app.route('/leaderboard')\ndef leaderboard():\n    \"\"\"Public leaderboard showing teams sorted by total score\"\"\"\n    teams = Team.query.all()\n    # Sort teams by total score in descending order\n    teams.sort(key=lambda x: x.total_score, reverse=True)\n    return render_template('leaderboard.html', teams=teams)\n\n@app.route('/api/teams', methods=['GET'])\ndef get_teams():\n    \"\"\"API endpoint to get all teams data\"\"\"\n    teams = Team.query.all()\n    teams_data = [team.to_dict() for team in teams]\n    # Sort by total score descending\n    teams_data.sort(key=lambda x: x['total_score'], reverse=True)\n    return jsonify(teams_data)\n\n@app.route('/api/teams/<int:team_id>', methods=['PUT'])\ndef update_team(team_id):\n    \"\"\"API endpoint to update team data\"\"\"\n    team = Team.query.get_or_404(team_id)\n    data = request.get_json()\n    \n    if 'name' in data:\n        team.name = data['name']\n    if 'dance_score' in data:\n        team.dance_score = float(data['dance_score'])\n    if 'song_score' in data:\n        team.song_score = float(data['song_score'])\n    if 'ramp_walk_score' in data:\n        team.ramp_walk_score = float(data['ramp_walk_score'])\n    if 'game_score' in data:\n        team.game_score = float(data['game_score'])\n    \n    db.session.commit()\n    return jsonify(team.to_dict())\n\n@app.route('/api/teams/<int:team_id>/upload_photo', methods=['POST'])\ndef upload_team_photo(team_id):\n    \"\"\"API endpoint to upload team photo\"\"\"\n    team = Team.query.get_or_404(team_id)\n    \n    if 'photo' not in request.files:\n        return jsonify({'error': 'No file provided'}), 400\n    \n    file = request.files['photo']\n    if file.filename == '':\n        return jsonify({'error': 'No file selected'}), 400\n    \n    if file and allowed_file(file.filename):\n        # Create secure filename with team ID prefix\n        filename = secure_filename(f\"team_{team_id}_{file.filename}\")\n        file_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n        \n        # Remove old photo if exists\n        if team.photo_url:\n            old_file_path = os.path.join('static', team.photo_url.lstrip('/'))\n            if os.path.exists(old_file_path):\n                os.remove(old_file_path)\n        \n        file.save(file_path)\n        team.photo_url = f\"/static/uploads/{filename}\"\n        db.session.commit()\n        \n        return jsonify({\n            'message': 'Photo uploaded successfully',\n            'photo_url': team.photo_url\n        })\n    \n    return jsonify({'error': 'Invalid file type'}), 400\n\n@app.route('/api/finalize_results', methods=['POST'])\ndef finalize_results():\n    \"\"\"API endpoint to finalize results and trigger celebration\"\"\"\n    teams = Team.query.all()\n    teams.sort(key=lambda x: x.total_score, reverse=True)\n    \n    # Get top 3 teams\n    top_teams = teams[:3] if len(teams) >= 3 else teams\n    top_team_ids = [team.id for team in top_teams]\n    \n    return jsonify({\n        'message': 'Results finalized',\n        'top_teams': top_team_ids\n    })\n\n@app.route('/performances')\ndef performances():\n    \"\"\"Performance tracking page\"\"\"\n    performances = Performance.query.order_by(Performance.id).all()\n    return render_template('performances.html', performances=performances)\n\n@app.route('/api/performances', methods=['GET'])\ndef get_performances():\n    \"\"\"API endpoint to get all performances\"\"\"\n    performances = Performance.query.order_by(Performance.id).all()\n    performances_data = [performance.to_dict() for performance in performances]\n    return jsonify(performances_data)\n\n@app.route('/api/performances/<int:performance_id>/complete', methods=['POST'])\ndef complete_performance(performance_id):\n    \"\"\"API endpoint to mark a performance as completed\"\"\"\n    performance = Performance.query.get_or_404(performance_id)\n    \n    if not performance.is_completed:\n        performance.mark_completed()\n        db.session.commit()\n        return jsonify({\n            'message': 'Performance marked as completed',\n            'performance': performance.to_dict()\n        })\n    \n    return jsonify({'message': 'Performance was already completed'})\n\n@app.route('/api/performances/<int:performance_id>/uncomplete', methods=['POST'])\ndef uncomplete_performance(performance_id):\n    \"\"\"API endpoint to mark a performance as not completed\"\"\"\n    performance = Performance.query.get_or_404(performance_id)\n    \n    if performance.is_completed:\n        performance.is_completed = False\n        performance.completed_at = None\n        db.session.commit()\n        return jsonify({\n            'message': 'Performance marked as not completed',\n            'performance': performance.to_dict()\n        })\n    \n    return jsonify({'message': 'Performance was already not completed'})\n\n@app.route('/api/performances/<int:performance_id>/notes', methods=['PUT'])\ndef update_performance_notes(performance_id):\n    \"\"\"API endpoint to update performance notes\"\"\"\n    performance = Performance.query.get_or_404(performance_id)\n    data = request.get_json()\n    \n    if 'notes' in data:\n        performance.notes = data['notes']\n        db.session.commit()\n        return jsonify({\n            'message': 'Notes updated successfully',\n            'performance': performance.to_dict()\n        })\n    \n    return jsonify({'error': 'No notes provided'}), 400\n","size_bytes":5981},"static/css/style.css":{"content":"/* Team photo styling */\n.team-photo-thumb {\n    width: 60px;\n    height: 60px;\n    object-fit: cover;\n    border-radius: 50%;\n    border: 2px solid var(--bs-border-color);\n}\n\n.team-photo-display {\n    width: 100px;\n    height: 100px;\n    object-fit: cover;\n    border-radius: 50%;\n    border: 2px solid var(--bs-border-color);\n}\n\n.team-photo-container {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 0.5rem;\n}\n\n.team-photo-large {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n/* Team cards */\n.team-card {\n    transition: transform 0.3s ease, box-shadow 0.3s ease;\n    position: relative;\n    overflow: hidden;\n    max-height: 280px;\n}\n\n.team-card:hover {\n    transform: translateY(-5px);\n    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);\n}\n\n.team-card.winner {\n    border: 3px solid #ffd700;\n    box-shadow: 0 0 20px rgba(255, 215, 0, 0.5);\n}\n\n.team-card.runner-up {\n    border: 3px solid #c0c0c0;\n    box-shadow: 0 0 15px rgba(192, 192, 192, 0.5);\n}\n\n.team-card.third-place {\n    border: 3px solid #cd7f32;\n    box-shadow: 0 0 15px rgba(205, 127, 50, 0.5);\n}\n\n/* Score breakdown styling */\n.score-breakdown {\n    background: var(--bs-body-bg);\n    border-radius: 0.3rem;\n    padding: 0.5rem;\n    border: 1px solid var(--bs-border-color);\n    font-size: 0.85rem;\n}\n\n/* Confetti animation */\n.confetti-piece {\n    position: absolute;\n    width: 10px;\n    height: 10px;\n    background: #ffd700;\n    animation: confetti-fall 3s linear infinite;\n    z-index: 1000;\n}\n\n.confetti-piece:nth-child(odd) {\n    background: #ff6b6b;\n    animation-delay: -0.5s;\n}\n\n.confetti-piece:nth-child(3n) {\n    background: #4ecdc4;\n    animation-delay: -1s;\n}\n\n.confetti-piece:nth-child(4n) {\n    background: #45b7d1;\n    animation-delay: -1.5s;\n}\n\n.confetti-piece:nth-child(5n) {\n    background: #96ceb4;\n    animation-delay: -2s;\n}\n\n@keyframes confetti-fall {\n    0% {\n        transform: translateY(-100vh) rotate(0deg);\n        opacity: 1;\n    }\n    100% {\n        transform: translateY(100vh) rotate(720deg);\n        opacity: 0;\n    }\n}\n\n/* Loading states */\n.loading {\n    opacity: 0.6;\n    pointer-events: none;\n}\n\n/* Responsive adjustments */\n@media (max-width: 768px) {\n    .team-photo-display {\n        width: 80px;\n        height: 80px;\n    }\n    \n    .team-photo-thumb {\n        width: 50px;\n        height: 50px;\n    }\n    \n    .score-breakdown {\n        font-size: 0.8rem;\n        padding: 0.3rem;\n    }\n    \n    .team-card {\n        max-height: 240px;\n    }\n}\n\n/* Large screen optimization for fitting all teams */\n@media (min-width: 1400px) {\n    .col-xl-3 {\n        flex: 0 0 auto;\n        width: 20%;\n    }\n}\n\n/* Leaderboard specific optimizations */\n.leaderboard-container {\n    max-height: 90vh;\n    overflow: hidden;\n}\n\n.team-card .card-body {\n    padding: 0.75rem;\n}\n\n.team-card .card-header {\n    padding: 0.5rem;\n}\n\n.team-card .card-footer {\n    padding: 0.5rem;\n}\n\n/* Admin table styling */\n.table td {\n    vertical-align: middle;\n}\n\n.score-input {\n    width: 80px;\n}\n\n/* Success animations */\n@keyframes pulse {\n    0% {\n        transform: scale(1);\n    }\n    50% {\n        transform: scale(1.05);\n    }\n    100% {\n        transform: scale(1);\n    }\n}\n\n.success-pulse {\n    animation: pulse 0.6s ease-in-out;\n}\n\n/* Default team image fallback */\n.team-photo-thumb[src=\"/static/uploads/default-team.svg\"],\n.team-photo-display[src=\"/static/uploads/default-team.svg\"] {\n    background: var(--bs-secondary);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.team-photo-thumb[src=\"/static/uploads/default-team.svg\"]::before,\n.team-photo-display[src=\"/static/uploads/default-team.svg\"]::before {\n    content: \"👥\";\n    font-size: 2rem;\n}\n","size_bytes":3729},"static/js/admin.js":{"content":"// Admin dashboard functionality\nclass AdminDashboard {\n    constructor() {\n        this.init();\n    }\n\n    init() {\n        this.bindEvents();\n        this.updateTotalScores();\n    }\n\n    bindEvents() {\n        // Score input changes\n        document.addEventListener('input', (e) => {\n            if (e.target.classList.contains('score-input')) {\n                this.updateTotalScore(e.target.closest('tr'));\n            }\n        });\n\n        // Individual team update buttons\n        document.addEventListener('click', (e) => {\n            if (e.target.closest('.update-team-btn')) {\n                const teamId = e.target.closest('.update-team-btn').dataset.teamId;\n                this.updateTeam(teamId);\n            }\n        });\n\n        // Save all button\n        document.getElementById('saveAllBtn').addEventListener('click', () => {\n            this.saveAllTeams();\n        });\n\n        // Photo upload\n        document.addEventListener('change', (e) => {\n            if (e.target.classList.contains('photo-upload')) {\n                const teamId = e.target.dataset.teamId;\n                this.uploadPhoto(teamId, e.target.files[0]);\n            }\n        });\n\n        // Finalize results button\n        document.getElementById('finalizeBtn').addEventListener('click', () => {\n            this.finalizeResults();\n        });\n    }\n\n    updateTotalScore(row) {\n        const scoreInputs = row.querySelectorAll('.score-input');\n        let total = 0;\n        \n        scoreInputs.forEach(input => {\n            const value = parseFloat(input.value) || 0;\n            total += value;\n        });\n\n        const totalScoreElement = row.querySelector('.total-score');\n        totalScoreElement.textContent = total.toFixed(1);\n        \n        // Add visual feedback\n        totalScoreElement.classList.add('success-pulse');\n        setTimeout(() => {\n            totalScoreElement.classList.remove('success-pulse');\n        }, 600);\n    }\n\n    updateTotalScores() {\n        const rows = document.querySelectorAll('tbody tr');\n        rows.forEach(row => this.updateTotalScore(row));\n    }\n\n    async updateTeam(teamId) {\n        const row = document.querySelector(`tr[data-team-id=\"${teamId}\"]`);\n        const teamData = this.getTeamDataFromRow(row);\n\n        try {\n            this.showLoading();\n            \n            const response = await fetch(`/api/teams/${teamId}`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(teamData)\n            });\n\n            if (!response.ok) {\n                throw new Error('Failed to update team');\n            }\n\n            const updatedTeam = await response.json();\n            this.showSuccess(row);\n            \n        } catch (error) {\n            console.error('Error updating team:', error);\n            this.showError('Failed to update team');\n        } finally {\n            this.hideLoading();\n        }\n    }\n\n    async saveAllTeams() {\n        const rows = document.querySelectorAll('tbody tr');\n        const promises = [];\n\n        for (const row of rows) {\n            const teamId = row.dataset.teamId;\n            const teamData = this.getTeamDataFromRow(row);\n            \n            promises.push(\n                fetch(`/api/teams/${teamId}`, {\n                    method: 'PUT',\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                    body: JSON.stringify(teamData)\n                })\n            );\n        }\n\n        try {\n            this.showLoading();\n            \n            const responses = await Promise.all(promises);\n            const failed = responses.filter(r => !r.ok);\n            \n            if (failed.length > 0) {\n                throw new Error(`Failed to update ${failed.length} teams`);\n            }\n\n            this.showSuccess();\n            \n        } catch (error) {\n            console.error('Error saving all teams:', error);\n            this.showError('Failed to save all teams');\n        } finally {\n            this.hideLoading();\n        }\n    }\n\n    async uploadPhoto(teamId, file) {\n        if (!file) return;\n\n        const formData = new FormData();\n        formData.append('photo', file);\n\n        try {\n            this.showLoading();\n            \n            const response = await fetch(`/api/teams/${teamId}/upload_photo`, {\n                method: 'POST',\n                body: formData\n            });\n\n            if (!response.ok) {\n                throw new Error('Failed to upload photo');\n            }\n\n            const result = await response.json();\n            \n            // Update the photo display\n            const row = document.querySelector(`tr[data-team-id=\"${teamId}\"]`);\n            const img = row.querySelector('.team-photo-thumb');\n            img.src = result.photo_url;\n            \n            this.showSuccess(row);\n            \n        } catch (error) {\n            console.error('Error uploading photo:', error);\n            this.showError('Failed to upload photo');\n        } finally {\n            this.hideLoading();\n        }\n    }\n\n    async finalizeResults() {\n        if (!confirm('Are you sure you want to finalize the results? This will trigger the celebration display.')) {\n            return;\n        }\n\n        try {\n            const response = await fetch('/api/finalize_results', {\n                method: 'POST'\n            });\n\n            if (!response.ok) {\n                throw new Error('Failed to finalize results');\n            }\n\n            const result = await response.json();\n            alert('Results finalized! Check the leaderboard for celebration effects.');\n            \n        } catch (error) {\n            console.error('Error finalizing results:', error);\n            this.showError('Failed to finalize results');\n        }\n    }\n\n    getTeamDataFromRow(row) {\n        return {\n            name: row.querySelector('.team-name').value,\n            dance_score: parseFloat(row.querySelector('[data-score-type=\"dance_score\"]').value) || 0,\n            song_score: parseFloat(row.querySelector('[data-score-type=\"song_score\"]').value) || 0,\n            ramp_walk_score: parseFloat(row.querySelector('[data-score-type=\"ramp_walk_score\"]').value) || 0,\n            game_score: parseFloat(row.querySelector('[data-score-type=\"game_score\"]').value) || 0\n        };\n    }\n\n    showLoading() {\n        document.getElementById('loadingSpinner').classList.remove('d-none');\n        document.body.classList.add('loading');\n    }\n\n    hideLoading() {\n        document.getElementById('loadingSpinner').classList.add('d-none');\n        document.body.classList.remove('loading');\n    }\n\n    showSuccess(element = null) {\n        if (element) {\n            element.classList.add('success-pulse');\n            setTimeout(() => {\n                element.classList.remove('success-pulse');\n            }, 600);\n        }\n    }\n\n    showError(message) {\n        alert(message); // Simple error display - could be enhanced with toasts\n    }\n}\n\n// Initialize admin dashboard when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    new AdminDashboard();\n});\n","size_bytes":7251},"static/js/confetti.js":{"content":"// Confetti animation system\nclass Confetti {\n    constructor() {\n        this.container = null;\n        this.pieces = [];\n        this.colors = ['#ffd700', '#ff6b6b', '#4ecdc4', '#45b7d1', '#96ceb4', '#feca57'];\n        this.isActive = false;\n    }\n\n    static create() {\n        const confetti = new Confetti();\n        confetti.init();\n        return confetti;\n    }\n\n    init() {\n        this.createContainer();\n        this.startAnimation();\n    }\n\n    createContainer() {\n        this.container = document.getElementById('confettiContainer');\n        if (!this.container) {\n            this.container = document.createElement('div');\n            this.container.id = 'confettiContainer';\n            this.container.style.cssText = `\n                position: fixed;\n                top: 0;\n                left: 0;\n                width: 100%;\n                height: 100%;\n                pointer-events: none;\n                z-index: 9999;\n                overflow: hidden;\n            `;\n            document.body.appendChild(this.container);\n        }\n    }\n\n    createPiece() {\n        const piece = document.createElement('div');\n        piece.className = 'confetti-piece';\n        \n        const color = this.colors[Math.floor(Math.random() * this.colors.length)];\n        const size = Math.random() * 8 + 4; // 4-12px\n        const startX = Math.random() * window.innerWidth;\n        const animationDuration = Math.random() * 2 + 2; // 2-4 seconds\n        const animationDelay = Math.random() * 2; // 0-2 seconds delay\n        \n        piece.style.cssText = `\n            position: absolute;\n            width: ${size}px;\n            height: ${size}px;\n            background: ${color};\n            left: ${startX}px;\n            top: -10px;\n            border-radius: ${Math.random() > 0.5 ? '50%' : '0'};\n            animation: confetti-fall ${animationDuration}s linear ${animationDelay}s forwards;\n            transform: rotate(${Math.random() * 360}deg);\n        `;\n        \n        return piece;\n    }\n\n    startAnimation() {\n        if (this.isActive) return;\n        \n        this.isActive = true;\n        const pieceCount = 100;\n        \n        // Create initial burst\n        for (let i = 0; i < pieceCount; i++) {\n            const piece = this.createPiece();\n            this.container.appendChild(piece);\n            this.pieces.push(piece);\n        }\n        \n        // Continue creating pieces for 3 seconds\n        const interval = setInterval(() => {\n            if (!this.isActive) {\n                clearInterval(interval);\n                return;\n            }\n            \n            for (let i = 0; i < 10; i++) {\n                const piece = this.createPiece();\n                this.container.appendChild(piece);\n                this.pieces.push(piece);\n            }\n        }, 200);\n        \n        // Stop after 3 seconds\n        setTimeout(() => {\n            clearInterval(interval);\n            this.stopAnimation();\n        }, 3000);\n        \n        // Clean up pieces after animation completes\n        setTimeout(() => {\n            this.cleanup();\n        }, 6000);\n    }\n\n    stopAnimation() {\n        this.isActive = false;\n    }\n\n    cleanup() {\n        this.pieces.forEach(piece => {\n            if (piece.parentNode) {\n                piece.parentNode.removeChild(piece);\n            }\n        });\n        this.pieces = [];\n    }\n\n    destroy() {\n        this.cleanup();\n        if (this.container && this.container.parentNode) {\n            this.container.parentNode.removeChild(this.container);\n        }\n    }\n}\n\n// Make Confetti available globally\nwindow.Confetti = Confetti;\n\n// CSS animation keyframes (fallback if not in CSS file)\nif (!document.querySelector('#confetti-styles')) {\n    const style = document.createElement('style');\n    style.id = 'confetti-styles';\n    style.textContent = `\n        @keyframes confetti-fall {\n            0% {\n                transform: translateY(-100vh) rotate(0deg);\n                opacity: 1;\n            }\n            100% {\n                transform: translateY(100vh) rotate(720deg);\n                opacity: 0;\n            }\n        }\n    `;\n    document.head.appendChild(style);\n}\n","size_bytes":4190},"static/js/leaderboard.js":{"content":"// Leaderboard functionality\nclass Leaderboard {\n    constructor() {\n        this.refreshInterval = null;\n        this.init();\n    }\n\n    init() {\n        this.bindEvents();\n        this.startAutoRefresh();\n    }\n\n    bindEvents() {\n        // Manual refresh button\n        document.getElementById('refreshBtn').addEventListener('click', () => {\n            this.refreshData();\n        });\n    }\n\n    startAutoRefresh() {\n        // Refresh every 5 seconds\n        this.refreshInterval = setInterval(() => {\n            this.refreshData();\n        }, 5000);\n    }\n\n    stopAutoRefresh() {\n        if (this.refreshInterval) {\n            clearInterval(this.refreshInterval);\n            this.refreshInterval = null;\n        }\n    }\n\n    async refreshData() {\n        try {\n            const response = await fetch('/api/teams');\n            if (!response.ok) {\n                throw new Error('Failed to fetch teams data');\n            }\n\n            const teams = await response.json();\n            this.updateLeaderboard(teams);\n            this.updateRankingStyles(teams);\n            \n        } catch (error) {\n            console.error('Error refreshing data:', error);\n        }\n    }\n\n    updateLeaderboard(teams) {\n        const grid = document.getElementById('leaderboardGrid');\n        \n        teams.forEach((team, index) => {\n            const teamCard = document.querySelector(`[data-team-id=\"${team.id}\"]`);\n            if (!teamCard) return;\n\n            // Update team name\n            const nameElement = teamCard.querySelector('.card-title');\n            if (nameElement) nameElement.textContent = team.name;\n\n            // Update photo if changed\n            const photoElement = teamCard.querySelector('.team-photo-display');\n            if (photoElement && team.photo_url) {\n                photoElement.src = team.photo_url;\n            }\n\n            // Update total score\n            const totalScore = teamCard.querySelector('.total-score');\n            if (totalScore) totalScore.textContent = team.total_score.toFixed(1);\n\n            // Reorder cards based on ranking\n            const cardCol = teamCard.closest('.col-lg-4');\n            grid.appendChild(cardCol);\n        });\n    }\n\n    updateRankingStyles(teams) {\n        // Remove all ranking classes first\n        const allCards = document.querySelectorAll('.team-card');\n        allCards.forEach(card => {\n            card.classList.remove('winner', 'runner-up', 'third-place');\n        });\n\n        // Apply ranking styles to top 3\n        if (teams.length >= 1) {\n            const winnerCard = document.querySelector(`[data-team-id=\"${teams[0].id}\"]`);\n            if (winnerCard) winnerCard.classList.add('winner');\n        }\n\n        if (teams.length >= 2) {\n            const runnerUpCard = document.querySelector(`[data-team-id=\"${teams[1].id}\"]`);\n            if (runnerUpCard) runnerUpCard.classList.add('runner-up');\n        }\n\n        if (teams.length >= 3) {\n            const thirdPlaceCard = document.querySelector(`[data-team-id=\"${teams[2].id}\"]`);\n            if (thirdPlaceCard) thirdPlaceCard.classList.add('third-place');\n        }\n    }\n\n    triggerCelebration() {\n        // Trigger confetti effect\n        if (window.Confetti) {\n            window.Confetti.create();\n        }\n\n        // Add celebration class to top teams\n        const topCards = document.querySelectorAll('.winner, .runner-up, .third-place');\n        topCards.forEach(card => {\n            card.classList.add('success-pulse');\n            setTimeout(() => {\n                card.classList.remove('success-pulse');\n            }, 2000);\n        });\n    }\n}\n\n// Check for celebration trigger from URL params or localStorage\nfunction checkForCelebration() {\n    const urlParams = new URLSearchParams(window.location.search);\n    const celebrate = urlParams.get('celebrate') || localStorage.getItem('celebrate');\n    \n    if (celebrate === 'true') {\n        setTimeout(() => {\n            if (window.leaderboard) {\n                window.leaderboard.triggerCelebration();\n            }\n        }, 1000);\n        \n        // Clear the celebration flag\n        localStorage.removeItem('celebrate');\n        \n        // Clean URL\n        if (urlParams.get('celebrate')) {\n            const newUrl = window.location.pathname;\n            window.history.replaceState({}, document.title, newUrl);\n        }\n    }\n}\n\n// Initialize leaderboard when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    window.leaderboard = new Leaderboard();\n    checkForCelebration();\n});\n\n// Clean up interval when page is unloaded\nwindow.addEventListener('beforeunload', () => {\n    if (window.leaderboard) {\n        window.leaderboard.stopAutoRefresh();\n    }\n});\n","size_bytes":4736},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483}},"version":1}